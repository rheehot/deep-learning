one_img <- image_read("data/captcha_tutorial/9.jpeg")
one_img
trelliscope(captcha_sample, name = "captcha_tutorial",
nrow = 3, ncol = 7,
path="captcha_tutorial")
captcha_sample <- captcha_df %>%
sample_n(100) %>%
mutate(label = as.character(label),
image = as.character(image),
panel = img_panel_local(image))
trelliscope(captcha_sample, name = "captcha_tutorial",
nrow = 3, ncol = 7,
path="captcha_tutorial")
? trelliscope
trelliscope(captcha_sample, name = "captcha_tutorial",
nrow = 3, ncol = 7,
path="captcha_tutorial",
panel_col = c("label")
)
trelliscope(captcha_sample, name = "captcha_tutorial",
nrow = 3, ncol = 7,
path="captcha_tutorial",
panel_col = list(c("label"))
)
trelliscope(captcha_sample, name = "captcha_tutorial",
nrow = 3, ncol = 7,
path="captcha_tutorial",
panel_col = list(labels = c("label"))
)
trelliscope(captcha_sample, name = "captcha_tutorial",
nrow = 3, ncol = 7,
path="captcha_tutorial",
state = list(labels = c("label"))
)
trelliscope(captcha_sample, name = "captcha_tutorial",
nrow = 3, ncol = 7,
path="captcha_tutorial",
state = list(labels = c("label", "panel"))
)
trelliscope(captcha_sample, name = "captcha_tutorial",
nrow = 3, ncol = 7,
path="captcha_tutorial",
panel_col =  label,
)
trelliscope(captcha_sample, name = "captcha_tutorial",
nrow = 3, ncol = 7,
path="captcha_tutorial",
panel_col =  "label",
)
trelliscope(captcha_sample, name = "captcha_tutorial",
nrow = 3, ncol = 7,
path="captcha_tutorial",
list(sort = list(sort_spec("cty_mean")))
)
trelliscope(captcha_sample, name = "captcha_tutorial",
nrow = 3, ncol = 7,
path="captcha_tutorial",
list(sort = list(sort_spec("label")))
)
trelliscope(captcha_sample, name = "captcha_tutorial",
nrow = 3, ncol = 7,
path="captcha_tutorial",
list(sort = list("label"))
)
trelliscope(captcha_sample, name = "captcha_tutorial",
nrow = 3, ncol = 7,
path="captcha_tutorial",
list(label = list("label"))
)
trelliscope(captcha_sample, name = "captcha_tutorial",
nrow = 3, ncol = 7,
path="captcha_tutorial",
state = list(sort = list(sort_spec("label")))
)
trelliscope(captcha_sample, name = "captcha_tutorial",
nrow = 3, ncol = 7,
path="captcha_tutorial",
state = list(label = list("label"))
)
trelliscope(captcha_sample, name = "captcha_tutorial",
nrow = 3, ncol = 7,
path="captcha_tutorial",
state = list(label = c("label"))
)
trelliscope(captcha_sample, name = "captcha_tutorial",
nrow = 3, ncol = 7,
path="captcha_tutorial",
state = list(label = c("label"))
)
trelliscope(captcha_sample, name = "captcha_tutorial",
nrow = 3, ncol = 7,
path="captcha_tutorial",
state = list(labels = c("label"))
)
library(trelliscopejs)
captcha_sample <- captcha_df %>%
sample_n(100) %>%
mutate(label = as.character(label),
image = as.character(image),
panel = img_panel_local(image))
trelliscope(captcha_sample, name = "captcha_tutorial",
nrow = 3, ncol = 7,
path="captcha_tutorial"
)
library(tidyverse)
library(slickR)
library(tidyverse)
library(slickR)
mnist_pdf <- pdftools::pdf_convert("data/1702.05373v1.pdf",format = 'png',verbose = FALSE)
slickR(mnist_pdf, height = 500)
library(tidyverse)
library(slickR)
mnist_pdf <- pdftools::pdf_convert("data/1702.05373v1.pdf",format = 'png',verbose = FALSE)
slickR(mnist_pdf, height = 500)
brew install libmagic
library(tidyverse)
library(slickR)
mnist_pdf <- pdftools::pdf_convert("data/1702.05373v1.pdf",format = 'png',verbose = FALSE)
slickR(mnist_pdf, height = 500)
bottom_opts <- settings(arrows = FALSE,
slidesToShow = 3,
slidesToScroll = 1,
centerMode = TRUE,
focusOnSelect = TRUE,
initialSlide = 0)
slickR(mnist_pdf, height = 800) %synch%
(slickR(mnist_pdf,height = 100) + bottom_opts)
bottom_opts <- settings(arrows = TRUE,
slidesToShow = 3,
slidesToScroll = 1,
centerMode = TRUE,
focusOnSelect = TRUE,
initialSlide = 0)
slickR(mnist_pdf, height = 800) %synch%
(slickR(mnist_pdf,height = 100) + bottom_opts)
library(glue)
file_names <- list.files("data/captcha_dataset/")
captcha_labels <- str_extract(file_names, "[\\w\\d]+?(?=\\.)")
captcha_df <- tibble(label = captcha_labels,
captcha = glue("data/captcha_dataset/{file_names}"))
captcha_df
captcha_df <- tibble(label = captcha_labels,
captcha = glue("data/captcha_dataset/{file_names}"),
score = runif(1070, min = 0, max = 1))
captcha_df
opts <- settings(
dots = TRUE,
initialSlide = 0,
slidesToShow = 5,
slidesToScroll = 5,
focusOnSelect = TRUE)
slickR(obj = captcha_df$captcha, height = 100, width = "95%") +
opts
captcha_num <- htmlwidgets::JS("function(slick,index) {
return '<a>'+(index+1)+'</a>';
}")
captcha_opts <- settings(
dots = TRUE,
initialSlide = 0,
slidesToShow = 10,
slidesToScroll = 10,
focusOnSelect = TRUE,
customPaging = captcha_num)
slickR(obj = captcha_df$captcha, height = 100, width = "100%")
%synch%
( slickR(captcha_df$label, slideType = 'p') + captcha_opts )
captcha_num <- htmlwidgets::JS("function(slick,index) {
return '<a>'+(index+1)+'</a>';
}")
captcha_opts <- settings(
dots = TRUE,
initialSlide = 0,
slidesToShow = 10,
slidesToScroll = 10,
focusOnSelect = TRUE,
customPaging = captcha_num)
slickR(obj = captcha_df$captcha, height = 100, width = "100%") %synch%
( slickR(captcha_df$label, slideType = 'p') + captcha_opts )
captcha_num <- htmlwidgets::JS("function(slick,index) {
return '<a>'+(index+1)+'</a>';
}")
captcha_opts <- settings(
dots = TRUE,
initialSlide = 0,
slidesToShow = 10,
slidesToScroll = 10,
focusOnSelect = TRUE,
customPaging = captcha_num)
slickR(obj = captcha_df$captcha, height = 100, width = "100%") %synch%
( slickR( captcha_df$label ) + captcha_opts )
captcha_num <- htmlwidgets::JS("function(slick,index) {
return '<a>'+(index+1)+'</a>';
}")
captcha_opts <- settings(
dots = TRUE,
initialSlide = 0,
slidesToShow = 10,
slidesToScroll = 10,
focusOnSelect = TRUE,
customPaging = captcha_num)
slickR(obj = captcha_df$captcha, height = 100, width = "100%") %synch%
( slickR(captcha_df$label, slideType = 'p') + captcha_opts ) %synch%
( slickR(captcha_df$score, slideType = 'p') + captcha_opts )
slickR(obj = nba_player_logo$uri[1:2], height = 100, width = "95%") %synch%
( slickR(nba_player_logo$name[1:2], slideType = 'p') + settings(arrows = TRUE) )
captcha_num <- htmlwidgets::JS("function(slick,index) {
return '<a>'+(index+1)+'</a>';
}")
captcha_opts <- settings(
dots = TRUE,
initialSlide = 0,
slidesToShow = 10,
slidesToScroll = 10,
focusOnSelect = TRUE,
customPaging = captcha_num,
arrows = FALSE)
slickR(obj = captcha_df$captcha, height = 100, width = "100%") %synch%
( slickR(captcha_df$label, slideType = 'p') + captcha_opts )
library(pdftools)
? pdf_convert
mnist_pdf <- pdf_convert("data/1702.05373v1.pdf",format = 'png',verbose = FALSE)
mnist_pdf
path_mnist_pdf <- glue::glue("data/{mnist_pdf}")
slickR(mnist_pdf, height = 600)
mnist_pdf <- pdf_convert("data/1702.05373v1.pdf",format = 'png',verbose = FALSE)
path_mnist_pdf <- glue::glue("data/{mnist_pdf}")
mnist_pdf_df <- tibble(page = glue::glue("data/{mnist_pdf}") )
library(tidyverse)
library(magick)
sample <- image_read("data/captcha_dataset/226md.png")
sample
library(glue)
file_names <- list.files("data/captcha_dataset/")
captcha_labels <- str_extract(file_names, "[\\w\\d]+?(?=\\.)")
captcha_df <- tibble(label = captcha_labels,
captcha = glue("data/captcha_dataset/{file_names}"))
captcha_df
library(magick)
img <- image_read("data/captcha_dataset/226md.png")
image_ocr(img)
image_ocr_data(img)
? ocr
ocr(img)
tesseract::ocr(img)
tesseract::ocr(img, engine = "eng")
letters
letters %>% paste0
paste0(letters, collapse = TRUE)
paste(letters, collapse = TRUE)
? paste
paste(letters, collapse = "")
whitelist <- "1234567890abcdefghijklmnopqrstuvwxy"
tesseract::ocr(img, engine = tesseract(language = "eng",
options = list(tessedit_char_whitelist = whitelist)))
tesseract::ocr(img, engine = ocr::tesseract(language = "eng",
options = list(tessedit_char_whitelist = whitelist)))
library(tesseract)
tesseract::ocr(img, engine = ocr::tesseract(language = "eng",
options = list(tessedit_char_whitelist = whitelist)))
tesseract::ocr(img, engine = tesseract(language = "eng",
options = list(tessedit_char_whitelist = whitelist)))
paste(letters, sep="")
paste(letters, collapse="")
whitelist <- glue::glue("1234567890{paste(letters, collapse="")}")
alphabet <- paste(letters, collapse="")
whitelist <- glue::glue("1234567890{alphabet}")
whitelist
img <- image_read("data/captcha_dataset/226md.png")
image_ocr(img)
img %>%
image_convert(colorspace = 'gray') %>%
image_trim() %>%
image_ocr()
img %>%
image_convert(colorspace = 'gray')
img %>%
image_convert(colorspace = 'gray') %>%
image_trim()
img %>%
image_convert(colorspace = 'gray') %>%
image_trim() %>%
image_ocr()
img %>%
image_convert(colorspace = 'gray') %>%
image_resize("4000") %>%
image_trim() %>%
image_ocr()
img %>%
image_convert(colorspace = 'gray') %>%
image_resize("2000") %>%
image_trim() %>%
image_ocr()
img %>%
image_convert(colorspace = 'gray') %>%
image_resize("2000")
img %>%
image_convert(colorspace = 'gray') %>%
image_resize("100") %>%
image_trim() %>%
image_ocr()
img %>%
image_convert(colorspace = 'gray') %>%
image_resize("100") %>%
image_trim()
img %>%
image_convert(colorspace = 'gray') %>%
image_resize("100")
img %>%
image_convert(colorspace = 'gray') %>%
image_resize("700") %>%
image_trim() %>%
image_ocr()
img
img <- image_read("data/captcha_dataset/226md.png")
img
print(img)
display(img)
show(img)
img
img %>%
image_convert(colorspace = 'gray') %>%
image_resize("700") %>%
image_trim() %>%
image_ocr()
img %>%
image_convert(colorspace = 'gray') %>%
image_resize("700")
img %>%
image_convert(colorspace = 'gray') %>%
image_resize("700") %>%
image_quantize(colorspace = "gray") %>%
image_trim()
img %>%
image_convert(colorspace = 'gray') %>%
image_resize("700") %>%
image_quantize(colorspace = "gray")
img %>%
image_convert(colorspace = 'gray') %>%
image_resize("700") %>%
image_quantize(colorspace = "gray") %>%
image_threshold(threshold = "50%")
img %>%
image_convert(colorspace = 'gray') %>%
image_resize("700") %>%
image_quantize(colorspace = "gray") %>%
image_threshold(threshold = "50%", channel = "bw")
? image_threshold
img %>%
image_convert(colorspace = 'gray') %>%
image_resize("700") %>%
image_quantize(colorspace = "gray") %>%
image_threshold(threshold = "50%", type = "white")
image_trim() %>%
image_ocr()
img %>%
image_convert(colorspace = 'gray') %>%
image_resize("700") %>%
image_quantize(colorspace = "gray") %>%
image_threshold(threshold = "50%", type = "white") %>%
image_trim() %>%
image_ocr()
img %>%
image_convert(colorspace = 'gray') %>%
# image_resize("700") %>%
image_quantize(colorspace = "gray") %>%
image_threshold(threshold = "50%", type = "white") %>%
image_trim() %>%
image_ocr()
img %>%
image_convert(colorspace = 'gray') %>%
# image_resize("700") %>%
image_quantize(colorspace = "gray") %>%
image_threshold(threshold = "50%", type = "white") %>%
image_trim() %>%
image_ocr_data()
img <- image_read("data/captcha_dataset/23n88.png") # 226md
img %>%
image_convert(colorspace = 'gray') %>%
# image_resize("700") %>%
image_quantize(colorspace = "gray") %>%
image_threshold(threshold = "50%", type = "white") %>%
image_trim() %>%
image_ocr_data()
img
tesseract::ocr(img, engine = tesseract(language = "eng",
options = list(tessedit_char_whitelist = whitelist)))
img_processed <- img %>%
image_convert(colorspace = 'gray') %>%
image_threshold(threshold = "50%", type = "white") %>%
image_trim()
tesseract::ocr(img_processed, engine = tesseract(language = "eng",
options = list(tessedit_char_whitelist = whitelist)))
img_processed <- img %>%
# image_convert(colorspace = 'gray') %>%
image_threshold(threshold = "50%", type = "white") %>%
image_trim()
tesseract::ocr(img_processed, engine = tesseract(language = "eng",
options = list(tessedit_char_whitelist = whitelist)))
img_processed <- img %>%
# image_convert(colorspace = 'gray') %>%
image_threshold(threshold = "50%", type = "white")
tesseract::ocr(img_processed, engine = tesseract(language = "eng",
options = list(tessedit_char_whitelist = whitelist)))
img_processed <- img %>%
image_convert(colorspace = 'gray') %>%
image_threshold(threshold = "50%", type = "white")
tesseract::ocr(img_processed, engine = tesseract(language = "eng",
options = list(tessedit_char_whitelist = whitelist)))
library(magick)
library(tesseract)
alphabet <- paste(letters, collapse="")
whitelist <- glue::glue("1234567890{alphabet}")
break_captcha <- function(image) {
captcha_orig <- image_read(image) # 226md
img_processed <- captcha_orig %>%
image_convert(colorspace = 'gray') %>%
image_threshold(threshold = "50%", type = "white")
captcha_text <- tesseract::ocr(img_processed, engine = tesseract(language = "eng",
options = list(tessedit_char_whitelist = whitelist)))
return(captcha_text)
}
break_captcha("data/captcha_dataset/23n88.png")
captcha_df
map(captcha_df$captcha, break_captcha)
captcha_df <- captcha_df %>%
mutate(text = map_chr(captcha, break_captcha))
captcha_df
captcha_df %>%
mutate(text = str_remove(text, "\n"))
captcha_df %>%
mutate(text = str_remove(text, "\n")) %>%
mutate(accuracy = ifelse(label == text, 1, 0))
captcha_df %>%
mutate(text = str_remove(text, "\n")) %>%
mutate(accuracy = ifelse(label == text, 1, 0)) %>%
summarise(accuracy = mean(accuracy))
captcha_df %>%
mutate(text = str_remove(text, "\n")) %>%
mutate(matching = ifelse(label == text, 1, 0)) %>%
summarise(accuracy = mean(matching))
captcha_df %>%
filter(matching == 1)
captcha_df <- captcha_df %>%
mutate(text = map_chr(captcha, break_captcha)) %>%
mutate(text = str_remove(text, "\n")) %>%
mutate(matching = ifelse(label == text, 1, 0))
captcha_df %>%
summarise(accuracy = mean(matching))
captcha_df %>%
filter(matching == 1)
broken_captcha <- captcha_df %>%
filter(matching == 1)
library(slickR)
broken_captcha <- captcha_df %>%
filter(matching == 1)
broken_captcha
library(slickR)
broken_captcha <- captcha_df %>%
filter(matching == 1)
captcha_num <- htmlwidgets::JS("function(slick,index) {
return '<a>'+(index+1)+'</a>';
}")
captcha_opts <- settings(
dots = TRUE,
initialSlide = 0,
slidesToShow = 10,
slidesToScroll = 10,
focusOnSelect = TRUE,
customPaging = captcha_num,
arrows = FALSE)
slickR(obj = broken_captcha$captcha, height = 100, width = "100%") %synch%
( slickR(broken_captcha$text, slideType = 'p') + captcha_opts )
failed_captcha <- captcha_df %>%
filter(matching == 0) %>%
sample_n(100)
devtools::install_github("bnosac/image",
subdir = "image.dlib",
build_vignettes = TRUE)
devtools::install_github("bnosac/image",
subdir = "image.libfacedetection",
build_vignettes = TRUE)
devtools::install_github("bnosac/image",
subdir = "image.libfacedetection",
build_vignettes = TRUE)
devtools::install_github("bnosac/image",
subdir = "image.libfacedetection",
build_vignettes = TRUE)
devtools::install_github("bnosac/image",
subdir = "image.libfacedetection",
build_vignettes = TRUE)
devtools::install_github("bnosac/image",
subdir = "image.libfacedetection",
build_vignettes = TRUE)
devtools::install_github("bnosac/image",
subdir = "image.libfacedetection",
build_vignettes = TRUE)
devtools::install_github("bnosac/image",
subdir = "image.libfacedetection",
build_vignettes = TRUE)
unlink("~/.R/Makevars")
unlink("~/.Renviron")
file.edit("~/.Renviron")
install.packages(c('Rcpp', 'RcppArmadillo'))
install.packages(c("Rcpp", "RcppArmadillo"))
Rcpp::sourceCpp('hello_world.cpp')
devtools::install_github("bnosac/image",
subdir = "image.libfacedetection",
build_vignettes = TRUE)
sessionInfo()
devtools::install_github("bnosac/image",
subdir = "image.libfacedetection",
build_vignettes = TRUE)
